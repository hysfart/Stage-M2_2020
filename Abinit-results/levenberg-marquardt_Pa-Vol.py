import os
import sys
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import numpy as np
"""
# FCC GGA
ydata = np.array([  2.5442E+02, 2.3409E+02, 2.1523E+02, 1.9774E+02, 1.8150E+02, 1.6644E+02, 1.5247E+02, 1.3951E+02,
 1.2748E+02, 1.1632E+02, 1.0597E+02, 9.6377E+01, 8.7478E+01, 7.9228E+01, 7.1581E+01, 6.4494E+01,
 5.7930E+01, 5.1853E+01, 4.6228E+01, 4.1025E+01, 3.6216E+01, 3.1774E+01, 2.7673E+01, 2.3891E+01,
 2.0406E+01, 1.7199E+01, 1.4250E+01, 1.1542E+01, 9.0582E+00, 6.7841E+00, 4.7056E+00, 2.8088E+00, 1.0816E+00,-4.8757E-01,
-1.9095E+00,-3.1944E+00,-4.3516E+00,-5.3902E+00,-6.3186E+00,-7.1447E+00,-7.8762E+00,-8.5203E+00,
-9.0837E+00,-9.5728E+00,-9.9938E+00,-1.0352E+01,-1.0653E+01,-1.0902E+01,-1.1104E+01,-1.1262E+01])
xdata = np.array([5.4000000E+01,5.5361281E+01,5.6745250E+01,5.8152094E+01,
5.9582000E+01,6.1035156E+01,6.2511750E+01,6.4011969E+01,
6.5536000E+01,6.7084031E+01,6.8656250E+01,7.0252844E+01,
7.1874000E+01,7.3519906E+01,7.5190750E+01,7.6886719E+01,
7.8608000E+01,8.0354781E+01,8.2127250E+01,8.3925594E+01,
8.5750000E+01,8.7600656E+01,8.9477750E+01,9.1381469E+01,
9.3312000E+01,9.5269531E+01,9.7254250E+01,9.9266344E+01,
1.0130600E+02,1.0337341E+02,1.0546875E+02,1.0759222E+02,
1.0974400E+02,1.1192428E+02,1.1413325E+02,1.1637109E+02,
1.1863800E+02,1.2093416E+02,1.2325975E+02,1.2561497E+02,
1.2800000E+02,1.3041503E+02,1.3286025E+02,1.3533584E+02,
1.3784200E+02,1.4037891E+02,1.4294675E+02,1.4554572E+02,1.4817600E+02,1.5083778E+02])

# CC GGA
ydata = np.array([  4.1774E+00, 2.1372E+00, 3.2052E-01,-1.2944E+00,-2.7260E+00,-3.9915E+00,-5.1065E+00,
-6.0850E+00,-6.9398E+00,-7.6823E+00,-8.3225E+00,-8.8706E+00,-9.3346E+00,-9.7221E+00,-1.0040E+01,
-1.0295E+01,-1.0492E+01,-1.0638E+01,-1.0736E+01,-1.0792E+01,-1.0810E+01,-1.0793E+01,-1.0745E+01,
-1.0669E+01,-1.0569E+01,-1.0447E+01,-1.0307E+01,-1.0150E+01,-9.9804E+00,-9.7992E+00,-9.6091E+00,
-9.4119E+00,-9.2097E+00,-9.0041E+00,-8.7965E+00,-8.5881E+00,-8.3800E+00,-8.1730E+00,-7.9676E+00,
-7.7645E+00])
xdata = np.array([ 1.0800000E+02,1.1072256E+02,1.1349050E+02,1.1630419E+02,
1.1916400E+02,1.2207031E+02,1.2502350E+02,1.2802394E+02,1.3107200E+02,1.3416806E+02,
1.3731250E+02,1.4050569E+02,1.4374800E+02,1.4703981E+02,1.5038150E+02,1.5377344E+02,
1.5721600E+02,1.6070956E+02,1.6425450E+02,1.6785119E+02,1.7150000E+02,1.7520131E+02,
1.7895550E+02,1.8276294E+02,1.8662400E+02,1.9053906E+02,1.9450850E+02,1.9853269E+02,
2.0261200E+02,2.0674681E+02,2.1093750E+02,2.1518444E+02,2.1948800E+02,2.2384856E+02,
2.2826650E+02,2.3274219E+02,2.3727600E+02,2.4186831E+02,2.4651950E+02,2.5122994E+02])
"""
# CC LDA
ydata = np.array([  3.8552E+00,
 1.8112E+00,
-9.5263E-03,
-1.6286E+00,
-3.0646E+00,
-4.3347E+00,
-5.4547E+00,
-6.4385E+00,
-7.2988E+00,
-8.0473E+00,
-8.6937E+00,
-9.2482E+00,
-9.7191E+00,
-1.0114E+01,
-1.0439E+01,
-1.0701E+01,
-1.0907E+01,
-1.1060E+01,
-1.1167E+01,
-1.1231E+01,
-1.1258E+01,
-1.1249E+01,
-1.1210E+01,
-1.1144E+01,
-1.1053E+01,
-1.0941E+01,
-1.0809E+01,
-1.0662E+01,
-1.0500E+01,
-1.0328E+01,
-1.0145E+01,
-9.9559E+00,
-9.7608E+00,
-9.5617E+00,
-9.3600E+00,
-9.1569E+00,
-8.9534E+00,
-8.7504E+00,
-8.5485E+00,
-8.3482E+00,
-8.1499E+00,
-7.9539E+00,
-7.7604E+00,
-7.5694E+00,
-7.3815E+00,
-7.1965E+00,
-7.0144E+00,
-6.8354E+00,
-6.6594E+00,
-6.4864E+00])
xdata = np.array([ 1.0800000E+02,
1.1072256E+02,
1.1349050E+02,
1.1630419E+02,
1.1916400E+02,
1.2207031E+02,
1.2502350E+02,
1.2802394E+02,
1.3107200E+02,
1.3416806E+02,
1.3731250E+02,
1.4050569E+02,
1.4374800E+02,
1.4703981E+02,
1.5038150E+02,
1.5377344E+02,
1.5721600E+02,
1.6070956E+02,
1.6425450E+02,
1.6785119E+02,
1.7150000E+02,
1.7520131E+02,
1.7895550E+02,
1.8276294E+02,
1.8662400E+02,
1.9053906E+02,
1.9450850E+02,
1.9853269E+02,
2.0261200E+02,
2.0674681E+02,
2.1093750E+02,
2.1518444E+02,
2.1948800E+02,
2.2384856E+02,
2.2826650E+02,
2.3274219E+02,
2.3727600E+02,
2.4186831E+02,
2.4651950E+02,
2.5122994E+02,
2.5600000E+02,
2.6083006E+02,
2.6572050E+02,
2.7067169E+02,
2.7568400E+02,
2.8075781E+02,
2.8589350E+02,
2.9109144E+02,
2.9635200E+02,
3.0167556E+02])

"""
# FCC LDA
xdata = np.array([ 5.4000000E+01,
5.5361281E+01,5.6745250E+01,5.8152094E+01,5.9582000E+01,6.1035156E+01,6.2511750E+01,6.4011969E+01,6.5536000E+01,
6.7084031E+01,6.8656250E+01,7.0252844E+01,7.1874000E+01,7.3519906E+01,7.5190750E+01,7.6886719E+01,7.8608000E+01,8.0354781E+01,
8.2127250E+01,8.3925594E+01,8.5750000E+01,8.7600656E+01,8.9477750E+01,9.1381469E+01,9.3312000E+01,
9.5269531E+01,9.7254250E+01,9.9266344E+01,1.0130600E+02,1.0337341E+02,1.0546875E+02,1.0759222E+02,
1.0974400E+02,1.1192428E+02,1.1413325E+02,1.1637109E+02,1.1863800E+02,1.2093416E+02,1.2325975E+02,
1.2561497E+02,1.2800000E+02,1.3041503E+02,1.3286025E+02,
1.3533584E+02,1.3784200E+02,1.4037891E+02,1.4294675E+02,1.4554572E+02,1.4817600E+02,1.5083778E+02])
ydata = np.array([ 2.5435E+02, 2.3400E+02, 2.1512E+02,
 1.9761E+02, 1.8136E+02, 1.6628E+02, 1.5230E+02, 1.3932E+02, 1.2728E+02, 1.1611E+02, 1.0575E+02,
 9.6141E+01, 8.7232E+01, 7.8972E+01, 7.1316E+01, 6.4221E+01, 5.7650E+01, 5.1565E+01, 4.5934E+01, 4.0726E+01, 3.5911E+01,
 3.1464E+01, 2.7359E+01, 2.3573E+01, 2.0086E+01, 1.6875E+01, 1.3924E+01, 1.1213E+01, 8.7279E+00, 6.4521E+00, 4.3723E+00,
 2.4742E+00, 7.4592E-01,-8.2427E-01,-2.2472E+00,-3.5331E+00,-4.6915E+00,-5.7314E+00,-6.6613E+00,-7.4892E+00,-8.2228E+00,
-8.8694E+00,-9.4357E+00,-9.9281E+00,-1.0353E+01,-1.0715E+01,-1.1021E+01,-1.1275E+01,-1.1482E+01,-1.1646E+01])


# HC GGA hydro
xdata = np.array([1.9970152E+02,2.0046872E+02,2.0125057E+02,2.0204762E+02,
2.0286047E+02,2.0368978E+02,2.0453621E+02,2.0540048E+02,2.0628334E+02,2.0718562E+02,2.0810821E+02,
2.0905200E+02,2.1001803E+02,2.1100682E+02,2.1202048E+02,2.1305985E+02,2.1412627E+02,2.1522118E+02,
2.1634617E+02,2.1750299E+02,2.1869354E+02,2.1991985E+02,2.2118424E+02,2.2248859E+02,2.2383668E+02,
2.2523115E+02,2.2667533E+02,2.2817306E+02,2.2972862E+02,2.3134687E+02,2.3303333E+02,2.3479423E+02,
2.3663680E+02,2.3856867E+02,2.4060094E+02,2.4274456E+02,2.4501337E+02,2.4742428E+02,2.4999774E+02,
2.5275964E+02,2.5574300E+02,2.5899085E+02])
ydata = np.array([ 1.1768E+01, 1.1307E+01, 1.0845E+01, 1.0384E+01, 9.9224E+00, 9.4608E+00, 8.9993E+00,
 8.5378E+00, 8.0763E+00, 7.6148E+00, 7.1532E+00, 6.6917E+00, 6.2302E+00, 5.7686E+00, 5.3073E+00,
 4.8458E+00, 4.3843E+00, 3.9228E+00, 3.4613E+00, 2.9998E+00, 2.5382E+00, 2.0767E+00, 1.6152E+00,
 1.1536E+00, 6.9227E-01, 2.3077E-01,-2.3074E-01,-6.9225E-01,-1.1538E+00,-1.6153E+00,-2.0768E+00,
-2.5383E+00,-2.9998E+00,-3.4614E+00,-3.9228E+00,-4.3843E+00,-4.8458E+00,-5.3073E+00,-5.7688E+00,
-6.2303E+00,-6.6918E+00,-7.1534E+00])


# HC LDA hydro
xdata = np.array([1.9894840E+02,1.9970152E+02,2.0046872E+02,2.0125057E+02,2.0204762E+02,
2.0286047E+02,2.0368978E+02,2.0453621E+02,2.0540048E+02,2.0628334E+02,2.0718562E+02,2.0810821E+02,
2.0905200E+02,2.1001803E+02,2.1100682E+02,2.1202048E+02,2.1305985E+02,2.1412627E+02,2.1522118E+02,
2.1634617E+02,2.1750299E+02,2.1869354E+02,2.1991985E+02,2.2118424E+02,2.2248859E+02,2.2383668E+02,
2.2523115E+02,2.2667533E+02,2.2817306E+02,2.2972862E+02,2.3134687E+02,2.3303333E+02,2.3479423E+02,
2.3663680E+02,2.3856867E+02,2.4060094E+02,2.4274456E+02,2.4501337E+02,2.4742428E+02,2.4999774E+02,
2.5275964E+02,2.5574300E+02,2.5899085E+02])
ydata = np.array([ 1.1768E+01, 1.1307E+01, 1.0845E+01, 1.0384E+01, 9.9224E+00, 9.4608E+00,
 8.9993E+00, 8.5378E+00, 8.0763E+00, 7.6148E+00, 7.1532E+00, 6.6917E+00, 6.2302E+00,
 5.7686E+00, 5.3073E+00, 4.8458E+00, 4.3843E+00, 3.9228E+00, 3.4613E+00, 2.9998E+00,
 2.5382E+00, 2.0767E+00, 1.6152E+00, 1.1536E+00, 6.9227E-01, 2.3077E-01,-2.3074E-01,
-6.9225E-01,-1.1538E+00,-1.6153E+00,-2.0768E+00,-2.5383E+00,-2.9998E+00,-3.4614E+00,
-3.9228E+00,-4.3843E+00,-4.8458E+00,-5.3073E+00,-5.7688E+00,-6.2303E+00,-6.6918E+00,
-7.1534E+00,-7.6149E+00])

xdata = xdata/2
print(xdata.shape,ydata.shape)

"""
# Données brute de test (cfc)
#xdata = np.array([3.1250000e1,4.1593750e1,5.4000000e1,6.8656250e1,8.5750000e1,1.0546875e2,
#                       1.2800000e2,1.5353125e2,1.8225000e2,2.1434375e2,2.5000000e2,2.8940625e2,
#                       3.3275000e2,3.8021875e2,4.3200000e2,4.8828125e2,5.4925000e2,6.1509375e2,
#                       6.8600000e2,7.6215625e2])

#ydata_e = np.array([-1.8741721891,-2.1605502641,-2.3151216705,-2.3932575774,-2.4271914549,
#                  -2.4361480336,-2.4319555994,-2.4218323942,-2.4097585583,-2.3976173599,
#                  -2.3862108983,-2.3758754647,-2.3667243876,-2.3587399256,-2.3518375465,
#                  -2.3458945716,-2.3407725408,-2.3363444108,-2.3325159864,-2.3292293475])

#ydata = np.array([1191.2, 540.92, 238.55, 96.51, 30.366, 1.1705, -9.8993, -12.56, -11.935,
#                  -10.324, -8.5699, -6.9508, -5.561, -4.4157, -3.4966, -2.775, -2.2156,
#                  -1.7787, -1.4273, -1.1358])



# Methode de récupération des données
def grab_data(sep = "\t",name_file = None, x_=0, y_=1):
    output_file_ = name_file
    text = open(output_file_)
    lines = text.readline()
    xdata = []
    ydata = []
    for lines in text:
        if lines.rfind(sep) > -1:
            separate_line  = lines.split(sep)
            xdata.append(float(separate_line[0]))
            ydata.append(float(separate_line[1]))
    return (xdata,ydata)

# Initialisation des variables de données
#x_,y_ = grab_data(name_file=".dat")
#xdata = np.array(x_)
#ydata = np.array(y_)

# Méthode qui retourne les fonction
# de Murnagahn P(V) et E(V) (cette dernière présente des bugs)
def func_energy(x, B0, V0, B0p, E):
    return (V0*B0/B0p)*(B0p/(B0p-1)+(V0/x)**(B0p-1)+(V0/x))+E

def func_pressure(x, B0, V0, B0p):
    return ((3*B0/2)*((V0/x)**(7/3)-(V0/x)**(5/3))*(1+(3/4)*(B0p-4)*((V0/x)**(2/3)-1)))

# Méthode d'optimisation
# - Paramètre présupposés                           : bounds=([50,1e2,0],[80,3e2,10])
# - Augmentation du nombre d'itération de recherche : maxfev=500000

popt, pcov = curve_fit(func_pressure, xdata, ydata,
                       maxfev=500000, bounds=([0,0.1e2,-50],[90,1.5e2,20]))

print("-> DEBUG :: Doc paramètres = [B0, V0, B0p]")
print("-> DEBUG ::     B0  : Bulk modulus")
print("-> DEBUG ::     V0  : Volume")
print("-> DEBUG ::     B0p : Dérivée du bulk modulus")
print("-> DEBUG :: Paramètres optimisés = {}".format(popt))


# Boucle de test (inutile)
for j in range(1):
    pts = []
    estimate = []
    # Boucle de calcul des valeurs optimisés et estimés
    for i,x_ in enumerate(xdata):
        pts.append(func_pressure(x_, 70, 22.5, 15))
        estimate.append(func_pressure(x_,*popt))

    # Affichages des graphes
    #plt.plot(xdata,pts, label = 'estimate')
    plt.plot(xdata, ydata, label = 'exact')
    plt.plot(xdata, estimate, label = 'fitted')
    plt.legend()
    plt.show()


